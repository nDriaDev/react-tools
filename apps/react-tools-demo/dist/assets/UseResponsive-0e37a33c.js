import{r as reactExports,j as jsxRuntimeExports}from"./index-3465b69f.js";import{u as useSyncExternalStore}from"./useSyncExternalStore-4b83f1b0.js";const listeners=new Set,handler=()=>listeners.forEach(e=>e()),defaultConfig={xs:{value:576,condition:"<"},sm:{value:576,condition:">="},md:{value:768,condition:">="},lg:{value:992,condition:">="},xl:{value:1200,condition:">="}};function calcResponsive(config){const width=window.innerWidth,conf={},target=config??defaultConfig,keys=Object.keys(target);for(const key of keys)if(Reflect.get(target,key)){const point=Reflect.get(target,key),{value,condition}=typeof point=="number"?{value:point,condition:">"}:point;Reflect.set(conf,key,eval(`${width}${condition}${value}`))}return conf}function useResponsive(e){const s=reactExports.useRef(()=>calcResponsive(e===void 0?defaultConfig:e));return useSyncExternalStore(reactExports.useCallback(t=>(listeners.size===0&&window.addEventListener("resize",handler,{passive:!0}),listeners.add(t),()=>{listeners.delete(t),listeners.size===0&&window.removeEventListener("resize",handler)}),[]),reactExports.useMemo(()=>{let t=s.current();return()=>{const n=s.current(),r=Object.keys(n);for(const o of r)if(Reflect.get(t,o)!==Reflect.get(n,o)){t=n;break}return t}},[]))}const UseResponsive=()=>{const e=useResponsive();return jsxRuntimeExports.jsx("p",{children:JSON.stringify(e,null,2)})};export{UseResponsive};
